import sys
import os
import streamlit as st
import streamlit_ext as ste   # –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–∫–∞—á–∏–≤–∞—Ç—å —Ñ–∞–π–ª—ã –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
import pandas as pd
import pandas.io.formats.excel
from Functions import init_ranking, M_T_generator, game_creator, sorting, CO_2, CO_3, UC_M, ES, E, MC_McK, MC_D, \
    custom_format

st.set_page_config(
    page_title="Bibliometric IS",
    page_icon="üìö",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        "Report a bug": "mailto:avyudina_2@edu.hse.ru",
        "About": """
        –ê–≤—Ç–æ—Ä: –ê–Ω–≥–µ–ª–∏–Ω–∞ –Æ–¥–∏–Ω–∞ ([GitHub](https://github.com/AngelinaYudina), [c–∞–π—Ç](https://www.hse.ru/staff/ayudina))  
        –°—Ç–∞–∂–µ—Ä-–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –≤ [–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ü–µ–Ω—Ç—Ä–µ –∞–Ω–∞–ª–∏–∑–∞ –∏ –≤—ã–±–æ—Ä–∞ —Ä–µ—à–µ–Ω–∏–π –ù–ò–£ –í–®–≠](https://www.hse.ru/DeCAn/)
        """
    }
)

# –ú–∞—à–∏–Ω–Ω—ã–π —ç–ø—Å–∏–ª–æ–Ω –¥–ª—è —á–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
EPS = sys.float_info.epsilon

st.title("–ë–∏–±–ª–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ –Ω–∞—É—á–Ω—ã—Ö –∂—É—Ä–Ω–∞–ª–æ–≤")
st.write("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–π —Ñ–∞–π–ª. –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –≥–æ—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞, –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∏ "
         "—Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∏–º.")
st.warning(""" 
–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–æ –≤—Å–µ—Ö —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∏–ª—É—á—à–µ–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–µ!  
–ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ csv —Ñ–∞–π–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–ø—è—Ç—É—é (,) –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è! 
""")
# –í—ã–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑—Ü–∞ –¥–∞–Ω–Ω—ã—Ö
with open("sample_data.xlsx", "rb") as file:
    ste.download_button(
        label="–°–∫–∞—á–∞—Ç—å –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö",
        data=file,
        file_name="sample_data.xlsx"
    )
# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
if "file" not in st.session_state:
    st.session_state["file"] = None
file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª", type=["csv", "xls", "xlsx"], accept_multiple_files=False)
st.session_state["file"] = file
# –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
if file is not None:
    st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
    try:
        df = pd.read_csv(file, delimiter=",")
    except:
        df = pd.read_excel(file)
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π –∏–≥—Ä—ã G –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ df
    df = df.set_index(df.columns[0])
    rankings_all = init_ranking(df)
    M, T, counter = M_T_generator(rankings_all)
    G = game_creator(M)
    st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂—É—Ä–Ω–∞–ª–æ–≤ = {df.shape[0]}. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∏—á—å–∏—Ö = {counter}. –ò—Å—Ö–æ–¥–Ω—ã–µ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è: "
             f"{list(df.columns)}")
    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π, –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–π –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏—è—Ö
    tournament_solutions = [CO_2, CO_3, UC_M, ES, E, MC_McK, MC_D]
    sol_names = ["Copeland rule (2 v.)", "Copeland rule (3 v.)", "sorting by UC_M", "sorting by ES", "sorting by E",
                 "sorting by MC_McK", "sorting by MC_D"]
    for i in range(len(tournament_solutions)):
        ranking = sorting(G, tournament_solutions[i])
        rankings_all[sol_names[i]] = ranking
    st.write("–†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è –∂—É—Ä–Ω–∞–ª–æ–≤")
    st.dataframe(rankings_all)
    # –†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —Ä–∞–Ω–≥–æ–≤–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ œÑ_b –ö–µ–Ω–¥–∞–ª–ª–∞
    corr = rankings_all.corr(method='kendall')
    ind = corr.columns
    rounded_corr = corr.round(3)   # –¢–∞–±–ª–∏—Ü—É —Å –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    st.write("–ó–Ω–∞—á–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ œÑ_b –ö–µ–Ω–¥–∞–ª–ª–∞")
    st.dataframe(rounded_corr)
    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã —Å—Ç—Ä–æ–≥–æ–≥–æ –º–∞–∂–æ—Ä–∏—Ç–∞—Ä–Ω–æ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ œÑ_b
    matrix = [[0 for _ in range(len(ind))] for _ in range(len(ind))]
    for i in range(len(ind)):
        for j in range(len(ind)):
            val_i = 0
            val_j = 0
            if i < j:
                for k in range(len(df.columns)):
                    if corr.iloc[k, i] - corr.iloc[k, j] > EPS:
                        val_i += 1
                    elif corr.iloc[k, i] - corr.iloc[k, j] < - EPS:
                        val_j += 1
                if val_i > val_j:
                    matrix[i][j] = 1
                elif val_i < val_j:
                    matrix[j][i] = 1
    matrix_pd = pd.DataFrame(matrix, index=ind, columns=ind)
    res = pd.DataFrame(matrix, columns=ind, index=ind)
    sum_col = []
    for row in matrix:
        sum_row = sum(row)
        sum_col.append(sum_row)
    res["Copeland score s2"] = sum_col
    st.write("–ú–∞—Ç—Ä–∏—Ü–∞ —Å—Ç—Ä–æ–≥–æ–≥–æ –º–∞–∂–æ—Ä–∏—Ç–∞—Ä–Ω–æ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è (œÑ_b)")
    st.dataframe(res)
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–π
    pos = [x + 1 for x in range(len(ind))]
    res_sorted = res.sort_values(by="Copeland score s2", ascending=False)
    ind_ranked = res_sorted.index
    final_ranking = pd.DataFrame(ind_ranked, columns=["–ú–µ—Ç–æ–¥"], index=pos)
    rank = []
    counter = 1
    value_prev = res_sorted["Copeland score s2"].values.max()
    for value in res_sorted["Copeland score s2"]:
        if value < value_prev:
            counter += 1
        rank.append(counter)
        value_prev = value
    final_ranking["–†–∞–Ω–≥"] = rank
    st.write("–†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–π")
    final_ranking = final_ranking.set_index("–†–∞–Ω–≥")
    st.dataframe(final_ranking)
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã
    st.write("–í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ:")
    pandas.io.formats.excel.ExcelFormatter.header_style = None   # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
    with pd.ExcelWriter("Results.xlsx", engine="xlsxwriter") as writer:
        rankings_all.to_excel(writer, sheet_name="Rankings")
        pd.DataFrame(M).to_excel(writer, sheet_name="M", header=False, index=False)
        pd.DataFrame(T).to_excel(writer, sheet_name="T", header=False, index=False)
        rounded_corr.to_excel(writer, sheet_name="œÑ_b")
        res.to_excel(writer, sheet_name="M (œÑ_b)")
        final_ranking.to_excel(writer, sheet_name="Ranking of rankings (œÑ_b)")
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
        sheet_Rankings = writer.sheets["Rankings"]
        sheet_M = writer.sheets["M"]
        sheet_T = writer.sheets["T"]
        sheet_t_b = writer.sheets["œÑ_b"]
        sheet_M_t_b = writer.sheets["M (œÑ_b)"]
        sheet_final_res = writer.sheets["Ranking of rankings (œÑ_b)"]
        sheets_list = [sheet_Rankings, sheet_M, sheet_T, sheet_t_b, sheet_M_t_b, sheet_final_res]
        default_col_width = 8
        for sheet in sheets_list:
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ —Å—Ç–∏–ª—è
            sheet.set_column("A1:XFD1048576", default_col_width, custom_format(writer, mode="base"))
        num_rows = rankings_all.shape[0]
        num_cols = rankings_all.shape[1]
        sheet_Rankings.set_row(0, 110, custom_format(writer, mode="header_col", rotation=90))
        sheet_Rankings.set_column("A1:A1", 50, custom_format(writer, mode="header_row"))
        sheet_t_b.set_column("A1:A1", 19, custom_format(writer, mode="header_row"))
        sheet_t_b.set_row(0, 110, custom_format(writer, mode="header_col", rotation=90))
        sheet_M_t_b.set_column("A1:A1", 19, custom_format(writer, mode="header_row"))
        sheet_M_t_b.set_row(0, 110, custom_format(writer, mode="header_col", rotation=90))
        sheet_final_res.set_column("B1:B1", 19, custom_format(writer, mode="base"))
    # –í—ã–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    with open("Results.xlsx", "rb") as file:
        ste.download_button(
            label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
            data=file,
            file_name="Results.xlsx"
        )
    os.remove("Results.xlsx")
